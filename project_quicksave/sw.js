try{self["workbox:core:7.0.0"]&&_()}catch{}const M=(n,...e)=>{let t=n;return e.length>0&&(t+=` :: ${JSON.stringify(e)}`),t},W=M;class f extends Error{constructor(e,t){const s=W(e,t);super(s),this.name=e,this.details=t}}const p={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:typeof registration<"u"?registration.scope:""},P=n=>[p.prefix,n,p.suffix].filter(e=>e&&e.length>0).join("-"),H=n=>{for(const e of Object.keys(p))n(e)},U={updateDetails:n=>{H(e=>{typeof n[e]=="string"&&(p[e]=n[e])})},getGoogleAnalyticsName:n=>n||P(p.googleAnalytics),getPrecacheName:n=>n||P(p.precache),getPrefix:()=>p.prefix,getRuntimeName:n=>n||P(p.runtime),getSuffix:()=>p.suffix};function j(n,e){const t=e();return n.waitUntil(t),t}try{self["workbox:precaching:7.0.0"]&&_()}catch{}const F="__WB_REVISION__";function B(n){if(!n)throw new f("add-to-cache-list-unexpected-type",{entry:n});if(typeof n=="string"){const o=new URL(n,location.href);return{cacheKey:o.href,url:o.href}}const{revision:e,url:t}=n;if(!t)throw new f("add-to-cache-list-unexpected-type",{entry:n});if(!e){const o=new URL(t,location.href);return{cacheKey:o.href,url:o.href}}const s=new URL(t,location.href),r=new URL(t,location.href);return s.searchParams.set(F,e),{cacheKey:s.href,url:r.href}}class ${constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:s})=>{if(e.type==="install"&&t&&t.originalRequest&&t.originalRequest instanceof Request){const r=t.originalRequest.url;s?this.notUpdatedURLs.push(r):this.updatedURLs.push(r)}return s}}}class V{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:t,params:s})=>{const r=s?.cacheKey||this._precacheController.getCacheKeyForURL(t.url);return r?new Request(r,{headers:t.headers}):t},this._precacheController=e}}let R;function G(){if(R===void 0){const n=new Response("");if("body"in n)try{new Response(n.body),R=!0}catch{R=!1}R=!1}return R}async function z(n,e){let t=null;if(n.url&&(t=new URL(n.url).origin),t!==self.location.origin)throw new f("cross-origin-copy-response",{origin:t});const s=n.clone(),o={headers:new Headers(s.headers),status:s.status,statusText:s.statusText},a=G()?s.body:await s.blob();return new Response(a,o)}const Q=n=>new URL(String(n),location.href).href.replace(new RegExp(`^${location.origin}`),"");function N(n,e){const t=new URL(n);for(const s of e)t.searchParams.delete(s);return t.href}async function J(n,e,t,s){const r=N(e.url,t);if(e.url===r)return n.match(e,s);const o=Object.assign(Object.assign({},s),{ignoreSearch:!0}),a=await n.keys(e,o);for(const c of a){const i=N(c.url,t);if(r===i)return n.match(c,s)}}class X{constructor(){this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t})}}const Y=new Set;async function Z(){for(const n of Y)await n()}function ee(n){return new Promise(e=>setTimeout(e,n))}try{self["workbox:strategies:7.0.0"]&&_()}catch{}function L(n){return typeof n=="string"?new Request(n):n}class te{constructor(e,t){this._cacheKeys={},Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new X,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const s of this._plugins)this._pluginStateMap.set(s,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let s=L(e);if(s.mode==="navigate"&&t instanceof FetchEvent&&t.preloadResponse){const a=await t.preloadResponse;if(a)return a}const r=this.hasCallback("fetchDidFail")?s.clone():null;try{for(const a of this.iterateCallbacks("requestWillFetch"))s=await a({request:s.clone(),event:t})}catch(a){if(a instanceof Error)throw new f("plugin-error-request-will-fetch",{thrownErrorMessage:a.message})}const o=s.clone();try{let a;a=await fetch(s,s.mode==="navigate"?void 0:this._strategy.fetchOptions);for(const c of this.iterateCallbacks("fetchDidSucceed"))a=await c({event:t,request:o,response:a});return a}catch(a){throw r&&await this.runCallbacks("fetchDidFail",{error:a,event:t,originalRequest:r.clone(),request:o.clone()}),a}}async fetchAndCachePut(e){const t=await this.fetch(e),s=t.clone();return this.waitUntil(this.cachePut(e,s)),t}async cacheMatch(e){const t=L(e);let s;const{cacheName:r,matchOptions:o}=this._strategy,a=await this.getCacheKey(t,"read"),c=Object.assign(Object.assign({},o),{cacheName:r});s=await caches.match(a,c);for(const i of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await i({cacheName:r,matchOptions:o,cachedResponse:s,request:a,event:this.event})||void 0;return s}async cachePut(e,t){const s=L(e);await ee(0);const r=await this.getCacheKey(s,"write");if(!t)throw new f("cache-put-with-no-response",{url:Q(r.url)});const o=await this._ensureResponseSafeToCache(t);if(!o)return!1;const{cacheName:a,matchOptions:c}=this._strategy,i=await self.caches.open(a),h=this.hasCallback("cacheDidUpdate"),u=h?await J(i,r.clone(),["__WB_REVISION__"],c):null;try{await i.put(r,h?o.clone():o)}catch(l){if(l instanceof Error)throw l.name==="QuotaExceededError"&&await Z(),l}for(const l of this.iterateCallbacks("cacheDidUpdate"))await l({cacheName:a,oldResponse:u,newResponse:o.clone(),request:r,event:this.event});return!0}async getCacheKey(e,t){const s=`${e.url} | ${t}`;if(!this._cacheKeys[s]){let r=e;for(const o of this.iterateCallbacks("cacheKeyWillBeUsed"))r=L(await o({mode:t,request:r,event:this.event,params:this.params}));this._cacheKeys[s]=r}return this._cacheKeys[s]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const s of this.iterateCallbacks(e))await s(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if(typeof t[e]=="function"){const s=this._pluginStateMap.get(t);yield o=>{const a=Object.assign(Object.assign({},o),{state:s});return t[e](a)}}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,s=!1;for(const r of this.iterateCallbacks("cacheWillUpdate"))if(t=await r({request:this.request,response:t,event:this.event})||void 0,s=!0,!t)break;return s||t&&t.status!==200&&(t=void 0),t}}class se{constructor(e={}){this.cacheName=U.getRuntimeName(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,s=typeof e.request=="string"?new Request(e.request):e.request,r="params"in e?e.params:void 0,o=new te(this,{event:t,request:s,params:r}),a=this._getResponse(o,s,t),c=this._awaitComplete(a,o,s,t);return[a,c]}async _getResponse(e,t,s){await e.runCallbacks("handlerWillStart",{event:s,request:t});let r;try{if(r=await this._handle(t,e),!r||r.type==="error")throw new f("no-response",{url:t.url})}catch(o){if(o instanceof Error){for(const a of e.iterateCallbacks("handlerDidError"))if(r=await a({error:o,event:s,request:t}),r)break}if(!r)throw o}for(const o of e.iterateCallbacks("handlerWillRespond"))r=await o({event:s,request:t,response:r});return r}async _awaitComplete(e,t,s,r){let o,a;try{o=await e}catch{}try{await t.runCallbacks("handlerDidRespond",{event:r,request:s,response:o}),await t.doneWaiting()}catch(c){c instanceof Error&&(a=c)}if(await t.runCallbacks("handlerDidComplete",{event:r,request:s,response:o,error:a}),t.destroy(),a)throw a}}class w extends se{constructor(e={}){e.cacheName=U.getPrecacheName(e.cacheName),super(e),this._fallbackToNetwork=e.fallbackToNetwork!==!1,this.plugins.push(w.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const s=await t.cacheMatch(e);return s||(t.event&&t.event.type==="install"?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,t){let s;const r=t.params||{};if(this._fallbackToNetwork){const o=r.integrity,a=e.integrity,c=!a||a===o;s=await t.fetch(new Request(e,{integrity:e.mode!=="no-cors"?a||o:void 0})),o&&c&&e.mode!=="no-cors"&&(this._useDefaultCacheabilityPluginIfNeeded(),await t.cachePut(e,s.clone()))}else throw new f("missing-precache-entry",{cacheName:this.cacheName,url:e.url});return s}async _handleInstall(e,t){this._useDefaultCacheabilityPluginIfNeeded();const s=await t.fetch(e);if(!await t.cachePut(e,s.clone()))throw new f("bad-precaching-response",{url:e.url,status:s.status});return s}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[s,r]of this.plugins.entries())r!==w.copyRedirectedCacheableResponsesPlugin&&(r===w.defaultPrecacheCacheabilityPlugin&&(e=s),r.cacheWillUpdate&&t++);t===0?this.plugins.push(w.defaultPrecacheCacheabilityPlugin):t>1&&e!==null&&this.plugins.splice(e,1)}}w.defaultPrecacheCacheabilityPlugin={async cacheWillUpdate({response:n}){return!n||n.status>=400?null:n}};w.copyRedirectedCacheableResponsesPlugin={async cacheWillUpdate({response:n}){return n.redirected?await z(n):n}};class re{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:s=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new w({cacheName:U.getPrecacheName(e),plugins:[...t,new V({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){const t=[];for(const s of e){typeof s=="string"?t.push(s):s&&s.revision===void 0&&t.push(s.url);const{cacheKey:r,url:o}=B(s),a=typeof s!="string"&&s.revision?"reload":"default";if(this._urlsToCacheKeys.has(o)&&this._urlsToCacheKeys.get(o)!==r)throw new f("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(o),secondEntry:r});if(typeof s!="string"&&s.integrity){if(this._cacheKeysToIntegrities.has(r)&&this._cacheKeysToIntegrities.get(r)!==s.integrity)throw new f("add-to-cache-list-conflicting-integrities",{url:o});this._cacheKeysToIntegrities.set(r,s.integrity)}if(this._urlsToCacheKeys.set(o,r),this._urlsToCacheModes.set(o,a),t.length>0){const c=`Workbox is precaching URLs without revision info: ${t.join(", ")}
This is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(c)}}}install(e){return j(e,async()=>{const t=new $;this.strategy.plugins.push(t);for(const[o,a]of this._urlsToCacheKeys){const c=this._cacheKeysToIntegrities.get(a),i=this._urlsToCacheModes.get(o),h=new Request(o,{integrity:c,cache:i,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:a},request:h,event:e}))}const{updatedURLs:s,notUpdatedURLs:r}=t;return{updatedURLs:s,notUpdatedURLs:r}})}activate(e){return j(e,async()=>{const t=await self.caches.open(this.strategy.cacheName),s=await t.keys(),r=new Set(this._urlsToCacheKeys.values()),o=[];for(const a of s)r.has(a.url)||(await t.delete(a),o.push(a.url));return{deletedURLs:o}})}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,s=this.getCacheKeyForURL(t);if(s)return(await self.caches.open(this.strategy.cacheName)).match(s)}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new f("non-precached-url",{url:e});return s=>(s.request=new Request(e),s.params=Object.assign({cacheKey:t},s.params),this.strategy.handle(s))}}let k;const T=()=>(k||(k=new re),k);try{self["workbox:routing:7.0.0"]&&_()}catch{}const O="GET",E=n=>n&&typeof n=="object"?n:{handle:n};class y{constructor(e,t,s=O){this.handler=E(t),this.match=e,this.method=s}setCatchHandler(e){this.catchHandler=E(e)}}class ne extends y{constructor(e,t,s){const r=({url:o})=>{const a=e.exec(o.href);if(a&&!(o.origin!==location.origin&&a.index!==0))return a.slice(1)};super(r,t,s)}}class oe{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:t}=e,s=this.handleRequest({request:t,event:e});s&&e.respondWith(s)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&e.data.type==="CACHE_URLS"){const{payload:t}=e.data,s=Promise.all(t.urlsToCache.map(r=>{typeof r=="string"&&(r=[r]);const o=new Request(...r);return this.handleRequest({request:o,event:e})}));e.waitUntil(s),e.ports&&e.ports[0]&&s.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:t}){const s=new URL(e.url,location.href);if(!s.protocol.startsWith("http"))return;const r=s.origin===location.origin,{params:o,route:a}=this.findMatchingRoute({event:t,request:e,sameOrigin:r,url:s});let c=a&&a.handler;const i=e.method;if(!c&&this._defaultHandlerMap.has(i)&&(c=this._defaultHandlerMap.get(i)),!c)return;let h;try{h=c.handle({url:s,request:e,event:t,params:o})}catch(l){h=Promise.reject(l)}const u=a&&a.catchHandler;return h instanceof Promise&&(this._catchHandler||u)&&(h=h.catch(async l=>{if(u)try{return await u.handle({url:s,request:e,event:t,params:o})}catch(d){d instanceof Error&&(l=d)}if(this._catchHandler)return this._catchHandler.handle({url:s,request:e,event:t});throw l})),h}findMatchingRoute({url:e,sameOrigin:t,request:s,event:r}){const o=this._routes.get(s.method)||[];for(const a of o){let c;const i=a.match({url:e,sameOrigin:t,request:s,event:r});if(i)return c=i,(Array.isArray(c)&&c.length===0||i.constructor===Object&&Object.keys(i).length===0||typeof i=="boolean")&&(c=void 0),{route:a,params:c}}return{}}setDefaultHandler(e,t=O){this._defaultHandlerMap.set(t,E(e))}setCatchHandler(e){this._catchHandler=E(e)}registerRoute(e){this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new f("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(t>-1)this._routes.get(e.method).splice(t,1);else throw new f("unregister-route-route-not-registered")}}let b;const ae=()=>(b||(b=new oe,b.addFetchListener(),b.addCacheListener()),b);function q(n,e,t){let s;if(typeof n=="string"){const o=new URL(n,location.href),a=({url:c})=>c.href===o.href;s=new y(a,e,t)}else if(n instanceof RegExp)s=new ne(n,e,t);else if(typeof n=="function")s=new y(n,e,t);else if(n instanceof y)s=n;else throw new f("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});return ae().registerRoute(s),s}function ce(n,e=[]){for(const t of[...n.searchParams.keys()])e.some(s=>s.test(t))&&n.searchParams.delete(t);return n}function*ie(n,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:t="index.html",cleanURLs:s=!0,urlManipulation:r}={}){const o=new URL(n,location.href);o.hash="",yield o.href;const a=ce(o,e);if(yield a.href,t&&a.pathname.endsWith("/")){const c=new URL(a.href);c.pathname+=t,yield c.href}if(s){const c=new URL(a.href);c.pathname+=".html",yield c.href}if(r){const c=r({url:o});for(const i of c)yield i.href}}class le extends y{constructor(e,t){const s=({request:r})=>{const o=e.getURLsToCacheKeys();for(const a of ie(r.url,t)){const c=o.get(a);if(c){const i=e.getIntegrityForCacheKey(c);return{cacheKey:c,integrity:i}}}};super(s,e.strategy)}}function he(n){const e=T(),t=new le(e,n);q(t)}const ue="-precache-",de=async(n,e=ue)=>{const s=(await self.caches.keys()).filter(r=>r.includes(e)&&r.includes(self.registration.scope)&&r!==n);return await Promise.all(s.map(r=>self.caches.delete(r))),s};function fe(){self.addEventListener("activate",n=>{const e=U.getPrecacheName();n.waitUntil(de(e).then(t=>{}))})}function pe(n){return T().createHandlerBoundToURL(n)}function ge(n){T().precache(n)}function we(n,e){ge(n),he(e)}function me(){self.addEventListener("activate",()=>self.clients.claim())}class ye extends y{constructor(e,{allowlist:t=[/./],denylist:s=[]}={}){super(r=>this._match(r),e),this._allowlist=t,this._denylist=s}_match({url:e,request:t}){if(t&&t.mode!=="navigate")return!1;const s=e.pathname+e.search;for(const r of this._denylist)if(r.test(s))return!1;return!!this._allowlist.some(r=>r.test(s))}}class C{constructor(e,t,s){this.name=e,this.version=t,this.storeList=s}static async new(e,t=1,s){const r=await C.initialize(e,t,s),o=s?C.getStoreList(r):[];return r.close(),new C(r.name,r.version,o)}async create(e,t){const s=await this.open(),r=this.startTransaction(s,e,"readwrite"),a=r.objectStore(e).add(t),c={passive:!0,once:!0},i=await new Promise((h,u)=>{const l=()=>{r.abort(),s.close(),u(new Error(a.error?.message,{cause:a.error?.cause}))},d=()=>{h(a.result)};a.addEventListener("error",l,c),a.addEventListener("success",d,c)});return r.commit(),s.close(),i}async read(e,t){const s=await this.open(),r=this.startTransaction(s,e,"readonly"),a=r.objectStore(e).get(t),c={passive:!0,once:!0},i=await new Promise((h,u)=>{const l=()=>{u(new Error(a.error?.message,{cause:a.error?.cause}))},d=()=>{h(a.result)};a.addEventListener("error",l,c),a.addEventListener("success",d,c)});return r.commit(),s.close(),i===void 0?null:i}async update(e,t,s){const r=await this.read(e,t);if(r===null)return!1;for(const[u,l]of Object.entries(s))r[u]=l;const o=await this.open(),a=this.startTransaction(o,e,"readwrite"),i=a.objectStore(e).put(r),h={passive:!0,once:!0};return await new Promise((u,l)=>{const d=()=>{l(new Error(i.error?.message,{cause:i.error?.cause}))},g=()=>{u(i.result)};i.addEventListener("error",d,h),i.addEventListener("success",g,h)}),a.commit(),o.close(),!0}async delete(e,t){if(await this.read(e,t)===null)return!1;const r=await this.open(),o=this.startTransaction(r,e,"readwrite"),c=o.objectStore(e).delete(t),i={passive:!0,once:!0};return await new Promise((h,u)=>{const l=()=>{u(new Error(c.error?.message,{cause:c.error?.cause}))},d=()=>{h(c.result)};c.addEventListener("error",l,i),c.addEventListener("success",d,i)}),o.commit(),r.close(),!0}async readList(e,t=null,s,r,o=0){const a=await this.open(),c=a.transaction(e,"readonly"),i=c.objectStore(e),h=t?i.index(t):null,u=s==="ascending"?"next":"prev",l=h?h.openCursor(null,u):i.openCursor(null,u),d={passive:!0},g=await new Promise((m,D)=>{const x=[];let S=0,K=o>0;const I=()=>{c.abort(),a.close(),D(new Error(l.error?.message,{cause:l.error?.cause}))},A=()=>{const v=l.result;v&&S<r?K?(K=!1,v.advance(o)):(x.push(v.value),S+=1,v.continue()):m(x)};l.addEventListener("error",I,d),l.addEventListener("success",A,d)});return c.commit(),a.close(),g}async count(e){const t=await this.open(),s=t.transaction(e,"readonly"),o=s.objectStore(e).count(),a={passive:!0,once:!0},c=await new Promise((i,h)=>{const u=()=>{s.abort(),t.close(),h(new Error(o.error?.message,{cause:o.error?.cause}))},l=()=>{i(o.result)};o.addEventListener("error",u,a),o.addEventListener("success",l,a)});return s.commit(),t.close(),c}static async initialize(e,t,s){const r=indexedDB.open(e,t),o={passive:!0,once:!0};return new Promise((a,c)=>{const i=()=>{c(new Error(r.error?.message,{cause:r.error?.cause}))},h=()=>{a(r.result)},u=()=>{if(!s)return;const l=r.result;for(const d of s){let g;if(l.objectStoreNames.contains(d.name)&&r.transaction?g=r.transaction.objectStore(d.name):g=l.createObjectStore(d.name,d.options),d.indexes.length>0)for(const m of d.indexes)g.indexNames.contains(m.name)||g.createIndex(m.name,m.keyPath,m.options)}};r.addEventListener("error",i,o),r.addEventListener("success",h,o),r.addEventListener("upgradeneeded",u,o)})}startTransaction(e,t,s){const r=e.transaction(t,s),o={passive:!0,once:!0},a=()=>{console.error("Transaction error:",r.error)},c=()=>{console.error("Transaction aborted:",r.error)},i=()=>{console.info("Transaction completed")};return r.addEventListener("error",a,o),r.addEventListener("abort",c,o),r.addEventListener("complete",i,o),r}static getStoreList(e){const t=Object.values(e.objectStoreNames),s=e.transaction(t,"readonly"),r=()=>{console.error("Transaction error:",s.error)},o=()=>{console.error("Transaction aborted:",s.error)},a=()=>{console.info("Transaction completed")},c={passive:!0,once:!0};s.addEventListener("abort",o,c),s.addEventListener("error",r,c),s.addEventListener("complete",a,c);const i=[];for(const h of t){const u=s.objectStore(h),l=Object.values(u.indexNames);i.push({name:h,indexList:l})}return s.commit(),i}upgrade(e){const t=indexedDB.open(this.name,this.version),s={passive:!0,once:!0};return new Promise((r,o)=>{const a=()=>{o(new Error(t.error?.message,{cause:t.error?.cause}))},c=()=>{r(t.result)};t.addEventListener("error",a,s),t.addEventListener("success",c,s),t.addEventListener("upgradeneeded",e,s)})}open(){const e=indexedDB.open(this.name,this.version),t={passive:!0,once:!0};return new Promise((s,r)=>{const o=()=>{r(new Error(e.error?.message,{cause:e.error?.cause}))},a=()=>{const c=e.result,i=()=>{console.error("Database operation error:",e.error)},h=()=>{console.error("Database operation aborted:",e.error)},u=()=>{console.info("Database closed")},l=()=>{console.info("Database version changed")};c.addEventListener("error",i,t),c.addEventListener("abort",h,t),c.addEventListener("close",u,t),c.addEventListener("versionchange",l,t),s(c)};e.addEventListener("error",o,t),e.addEventListener("success",a,t)})}}me();fe();we([{"revision":null,"url":"assets/index-CJs7YHbS.css"},{"revision":null,"url":"assets/index-CWzkbPXv.js"},{"revision":"d6c3af5e5083fa66bc92d2f2f9a57f4a","url":"index.html"},{"revision":"30371f4db407e26724be5c4f1e93f0cf","url":"pwa-192x192.png"},{"revision":"4d0675b766f8b92d40d90342565ac7bd","url":"pwa-512x512.png"},{"revision":"2d095c2c82bda5524036790d8bca571f","url":"manifest.webmanifest"}]);let Re;q(new ye(pe("index.html"),{allowlist:Re}));const be=n=>{const e={title:"",text:"",url:""},t=n.get("title"),s=n.get("text"),r=n.get("url");if(e.title=t??"",r)e.url=r,e.text=s??"";else if(s){const o=s.slice(0);if(typeof o=="string"){const a=o.split(" "),c=a.pop();c&&URL.canParse(c)?(e.url=c,e.text=a.join(" ")):e.text=s}}return e};self.addEventListener("install",()=>{self.skipWaiting()});self.addEventListener("fetch",n=>{const e=new URL(n.request.url);n.request.method==="POST"&&e.pathname==="/project_quicksave/share"&&n.respondWith((async()=>{const t=await n.request.formData(),{title:s,text:r,url:o}=be(t),a=await C.new("QuickSaveDB",2),c=Date.now();return await a.create("articles",{id:crypto.randomUUID(),title:s,url:o,description:r,timestamp:c}),Response.redirect("/project_quicksave/")})())});
